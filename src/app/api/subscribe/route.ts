import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const { email, consentement } = await req.json();
    const userCreated = process.env.NEXT_PUBLIC_DIRECTUS_CLIENT_ID;

    console.log("üîç Valeurs re√ßues :", { email, consentement, userCreated });

    if (!email) {
      return NextResponse.json({ message: "Email requis." }, { status: 400 });
    }

    // üîç V√©rifier si l'email existe d√©j√†
    const checkResponse = await fetch(`${process.env.NEXT_PUBLIC_DIRECTUS_API}/items/abonnes?filter[email][_eq]=${email}`, {
      headers: {
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_DIRECTUS_TOKEN}`,
      },
    });

    const checkData = await checkResponse.json();
    if (checkData.data.length > 0) {
      console.log("üö´ Email d√©j√† inscrit :", email);
      return NextResponse.json({ message: "Cet email est d√©j√† inscrit √† la newsletter." }, { status: 409 });
    }

    // ‚úÖ Nouvelle insertion AVEC valeurs forc√©es (y compris `consentement`)
    const payload = {
      email,
      consentement: consentement === true ? 1 : 0, // SQLite stocke les bool√©ens en tant que `0` ou `1`
      user_created: userCreated ?? null,
      date_created: new Date().toISOString(), // Ajoute toujours la date
    };

    console.log("üì§ Envoi des donn√©es √† Directus :", JSON.stringify(payload, null, 2));

    const response = await fetch(`${process.env.NEXT_PUBLIC_DIRECTUS_API}/items/abonnes`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_DIRECTUS_TOKEN}`,
      },
      body: JSON.stringify(payload),
    });

    const data = await response.json();

    if (!response.ok) {
      console.log("üî¥ R√©ponse compl√®te de Directus :", JSON.stringify(data, null, 2));
      throw new Error(data.errors?.[0]?.message || "Erreur lors de l'inscription.");
    }

    console.log("‚úÖ Abonn√© ajout√© avec succ√®s :", data);
    return NextResponse.json({ message: "Inscription r√©ussie !" }, { status: 201 });

  } catch (error) {
    console.error("‚ùå Erreur API abonnement :", error);
    return NextResponse.json({ message: "Erreur serveur" }, { status: 500 });
  }
}